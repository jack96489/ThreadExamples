@startuml Campane
actor Utente
participant main
entity datiCondivisi

Utente -> main ++ : start

main -> datiCondivisi ** : new
main -> thVisualizza ** : new
main -> thVisualizza ++ : start
main -> Din ** : new
main -> Din ++ : start
main -> Don ** : new
main -> Don ++ : start
main -> Dan ** : new
main -> Dan ++: start

loop while(true)
'Din -> datiCondivisi: semLetto.Wait()
'Din -> datiCondivisi: mutex.Wait()
Din -> datiCondivisi: semDan.Wait()
Din -> datiCondivisi: incDin()
Din -> datiCondivisi: semDin.Signal()
'Din -> datiCondivisi: mutex.Signal()
'Din -> datiCondivisi: semScritto.Signal()

thVisualizza -> datiCondivisi: semScritto.Wait()
thVisualizza -> Utente: Din
thVisualizza -> datiCondivisi: semLetto.Signal()

'Don -> datiCondivisi: semLetto.Wait()
'Don -> datiCondivisi: mutex.Wait()
Din -> datiCondivisi: semDin.Wait()
Don -> datiCondivisi: incDon()
Din -> datiCondivisi: semDon.Signal()
'Don -> datiCondivisi: mutex.Signal()
'Don -> datiCondivisi: semScritto.Signal()

thVisualizza -> datiCondivisi: semScritto.Wait()
thVisualizza -> Utente: Don
thVisualizza -> datiCondivisi: semLetto.Signal()

'Dan -> datiCondivisi: semLetto.Wait()
'Dan -> datiCondivisi: mutex.Wait()
Din -> datiCondivisi: semDon.Wait()
Dan -> datiCondivisi: incDan()
Din -> datiCondivisi: semDan.Signal()
'Dan -> datiCondivisi: mutex.Signal()
'Dan -> datiCondivisi: semScritto.Signal()

thVisualizza -> datiCondivisi: semScritto.Wait()
thVisualizza -> Utente: Dan
thVisualizza -> datiCondivisi: semLetto.Signal()
end

Utente -> main: preme tasto
main -> Din: interrupt()
main -> Don: interrupt()
main -> Dan: interrupt()
main -> thVisualizza: interrupt()

Din -> main --: return
note over main : join Din
Dan -> main --: return
Don -> main --: return
note over main : join Don
note over main : join Dan

thVisualizza -> main --: return
note over main : join thVisualizza
@enduml